{"pageProps":{"datas":{"id":111,"art_title":"错误边界（Error Boundaries）","art_content":"<p style=\"text-align: start;\">部分 UI 的 JavaScript 错误不应该导致整个应用崩溃，为了解决这个问题，React 16 引入了一个新的概念 —— 错误边界。</p><p style=\"text-align: start;\">错误边界是一种 React 组件，这种组件<strong>可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI</strong>，而并不会渲染那些发生崩溃的子组件树。错误边界可以捕获发生在整个子组件树的渲染期间、生命周期方法以及构造函数中的错误。</p><p style=\"text-align: start;\">错误边界是一种 React 组件，这种组件<strong>可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI</strong>，而并不会渲染那些发生崩溃的子组件树。错误边界可以捕获发生在整个子组件树的渲染期间、生命周期方法以及构造函数中的错误。</p><blockquote style=\"text-align: start;\">注意<br>错误边界无法捕获以下场景中产生的错误：<br>事件处理（了解更多）<br>异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数）<br>服务端渲染<br>它自身抛出来的错误（并非它的子组件）</blockquote><p style=\"text-align: start;\">如果一个 class 组件中定义了 <a href=\"https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromerror\" target=\"\"><code>static getDerivedStateFromError()</code></a> 或 <a href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch\" target=\"\"><code>componentDidCatch()</code></a> 这两个生命周期方法中的任意一个（或两个）时，那么它就变成一个错误边界。当抛出错误后，请使用 <span style=\"color: rgb(26, 26, 26); background-color: rgba(255, 229, 100, 0.2);\"><code>static getDerivedStateFromError()</code></span> 渲染备用 UI ，使用 <span style=\"color: rgb(26, 26, 26); background-color: rgba(255, 229, 100, 0.2);\"><code>componentDidCatch()</code></span> 打印错误信息。</p><pre><code class=\"language-javascript\">class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {    // 更新 state 使下一次渲染能够显示降级后的 UI    return { hasError: true };  }\n  componentDidCatch(error, errorInfo) {    // 你同样可以将错误日志上报给服务器    logErrorToMyService(error, errorInfo);  }\n  render() {\n    if (this.state.hasError) {      // 你可以自定义降级后的 UI 并渲染      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;    }\n    return this.props.children; \n  }\n}</code></pre><p style=\"text-align: start;\">然后你可以将它作为一个常规组件去使用：</p><pre><code class=\"language-javascript\">&lt;ErrorBoundary&gt;\n  &lt;MyWidget /&gt;\n&lt;/ErrorBoundary&gt;</code></pre><p style=\"text-align: start;\">错误边界的工作方式类似于 JavaScript 的 <span style=\"color: rgb(26, 26, 26); background-color: rgba(255, 229, 100, 0.2);\"><code>catch {}</code></span>，不同的地方在于错误边界只针对 React 组件。只有 class 组件才可以成为错误边界组件。大多数情况下, 你只需要声明一次错误边界组件, 并在整个应用中使用它。</p><p style=\"text-align: start;\">注意<strong>错误边界仅可以捕获其子组件的错误</strong>，它无法捕获其自身的错误。如果一个错误边界无法渲染错误信息，则错误会冒泡至最近的上层错误边界，这也类似于 JavaScript 中 <span style=\"color: rgb(26, 26, 26); background-color: rgba(255, 229, 100, 0.2);\"><code>catch {}</code></span> 的工作机制。</p><p><br></p>","art_author":"yellow star","art_createtime":"2022-12-20T07:46:06.000Z","art_tags":4}},"__N_SSG":true}