{"pageProps":{"datas":{"id":98,"art_title":"使用 Github Actions 部署react-app 到 Github Pages","art_content":"<h2 style=\"text-align: start;\">原文： <a href=\"https://segmentfault.com/a/1190000041449997\" target=\"_blank\">https://segmentfault.com/a/1190000041449997</a> </h2><h2 style=\"text-align: start;\">前言-学以致用</h2><p style=\"text-align: start;\">之前一直忙于开发，总是零散的去看一些东西，想想学东西了么？额... 好像学了，又好像没有学，不知道你们有没有这种感觉，所以新年初始，换一种学习方法，本着学以致用去完整的学一些东西，正好之前想接触CI,CD 这里的知识，所以就从最常见的github开始吧，毕竟免费又常用。</p><h2 style=\"text-align: start;\">初始化项目</h2><p style=\"text-align: start;\">创建github代码仓库，clone 项目到本地，进入目录初始化项目</p><pre style=\"text-align: start; line-height: 1.5;\"><code>npx create-react-app</code></pre><p style=\"text-align: start;\">然后按照命令提示输入完成初始化,推送项目到github。</p><h2 style=\"text-align: start;\">配置github actions</h2><p style=\"text-align: start;\">目标是实现推送代码到master分支, 自动开始构建项目，部署到Gthub Pages。<br>按照<a href=\"https://link.segmentfault.com/?enc=BsHuQ0PzigUZ28kaoAvQ1A%3D%3D.qxiSOELr%2FQtZg8yDLMw5z%2F3N%2Fg7890IdTr0xBDUgph6mtDx00VjRN6ObO29wJLlQ\" target=\"_blank\">文档</a>先跑起来第一个流程，让自己看到效果，在去学习语法内容，这样更能激发兴趣，免得直接看文档看睡着了...</p><ol style=\"text-align: start;\"><li>在目录外层增加 .gihub/workflows文件夹，创建第一个first-demo.yml文件，拷贝示例内容.</li></ol><pre style=\"text-align: start; line-height: 1.5;\"><code>name: GitHub Actions Demo\non: [push]\njobs:\n  Explore-GitHub-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"🎉 The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - run: echo \"🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!\"\n      - run: echo \"🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.\"\n      - name: Check out repository code\n        uses: actions/checkout@v2\n      - run: echo \"💡 The ${{ github.repository }} repository has been cloned to the runner.\"\n      - run: echo \"🖥️ The workflow is now ready to test your code on the runner.\"\n      - name: List files in the repository\n        run: |\n          ls ${{ github.workspace }}\n      - run: echo \"🍏 This job's status is ${{ job.status }}.\"</code></pre><ol style=\"text-align: start;\"><li>提交代码，点击gihub仓库上方的<strong>Actions</strong>按钮，查看效果，第一个工作流程就完成了。<br><img src=\"https://segmentfault.com/img/bVcX4QB\" alt=\"image.png\" data-href=\"\" style=\"\"></li></ol><h2 style=\"text-align: start;\">开始编写自己的yml文件,实现自动构建</h2><p style=\"text-align: start;\">快速过一遍文档，学习一下语法，实现自己想要的工作流程。从demo可以看到主要有流程有这么几步</p><ol style=\"text-align: start;\"><li>name 工作流程的名称。 GitHub 在仓库的操作页面上显示工作流程的名称。</li><li>on 触发流程的事件，具体可以触发的事件有<a href=\"https://link.segmentfault.com/?enc=RQOtsmXdu0%2FEXbROT%2FG%2F2Q%3D%3D.7z%2ByjH%2FOcAA%2Fn%2FAOG%2FPEc7sSAqWm8y9eeuk2jE6mKo3Sady7tvQdfp9twn8zABomtUFNy9UaxNnRKqmagziAA9KkvrPW%2FqZd9INMAa1hQb5%2Bbgd048QnZ4pxSaX8iVBA\" target=\"_blank\">这些</a>,我们所要实现的是提交代码，所以用 push.</li><li>jobs 要按顺序运行作业.</li></ol><p style=\"text-align: start;\">目标明确后，开始编写yml</p><pre style=\"text-align: start; line-height: 1.5;\"><code class=\"language-xml\"> # 显示得workflow名称\n name: First GitHub Actions Demo\n on: \n   # 推送到master分支开始打包\n   push:\n     branches:\n       - master\n\n jobs:\n   # 开始打包\n   Build:\n     runs-on: ubuntu-latest\n     steps:\n     - name: checkout code\n       # 迁出触发的流程的版本 能让下面的工作流程访问\n       uses: actions/checkout@v2\n       # setup-node 可以提供node环境，指定node版本以及 npm /yarn缓存\n     - name: actions/setup-node@v2\n       uses: actions/setup-node@v2   \n       with:\n         node: 16.14\n     # 初始用的npm 打包时间太长了，就想着用yarn 结果没仔细看文档，yarn 不用安装 ubuntu 上面有的 \n     # - name: install yarn \n     #  uses: npm install yarn     \n     # - run: yarn install\n     # - run: yarn build\n     # 简写为\n     - run: yarn install &amp;&amp; yarn build</code></pre><p style=\"text-align: start;\">好了提交代码看Actions（这是上面没有优化时的流程）。<br><img src=\"https://segmentfault.com/img/bVcX4U4\" alt=\"image.png\" data-href=\"\" style=\"\"><br>到此已经完成了提交代码自动打包的过程了，但是一看打包时间好家伙一分半，这要是实际开发大量依赖加入，那不得半个小时么？打开流程一看大部分时间都是在下载依赖，所以是不是可以添加缓存呢？一搜索果然有<a href=\"https://link.segmentfault.com/?enc=pnQPaLLU4xUkEVZs%2FAOMvg%3D%3D.2tU0x25fYK3W5v%2BKIaXbPtcgPRdBA3aCtheR9dRUoYVvVXrZqh4THcigzp8RkBWk\" target=\"_blank\">cache</a>,麻溜的按照文档添加进入，<br>一看时间46s,哈哈果然有效。到此yml内容为</p><pre style=\"text-align: start; line-height: 1.5;\"><code>name: First GitHub Actions Demo\non: \n  push:\n    branches:\n      - master\n\njobs:\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: checkout code\n      uses: actions/checkout@v2\n    - name: actions/setup-node@v2\n      uses: actions/setup-node@v2   \n      with:\n        node: 16.14\n    # 配置依赖缓存\n    - name: yarn cache\n      id: yarn-cahce-dir-path\n      run: echo \"::set-output name=dir::$(yarn cache dir)\"\n    - uses: actions/cache@v2\n      id: yarn-cache\n      with: \n        path: ${{ steps.yarn-cahce-dir-path.outputs.dir }}\n        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n        restore-keys: | \n          ${{ runner.os }}-yarn-\n    - run: yarn install &amp;&amp; yarn build</code></pre><h2 style=\"text-align: start;\">部署页面到Github Pages</h2><ol style=\"text-align: start;\"><li>首先需要设定一个分支，当做站点的根目录，具体<a href=\"https://link.segmentfault.com/?enc=VmP76VTiM%2BW%2BWDCp%2BCe%2BoQ%3D%3D.jjGmPHjENUgpLSpQUCjLgHZb4H9WteP7M1b8%2BsmlO6wkRYs7iMMi5X5gx4V3jda8WFrsrW7EPYw%2F0ARqadAHDW2cDfEmRicaQHdoj%2FsrssbgNcIGSjNimD2L2tqfO61ovyZJ7VdXGgATlEh37KyxRHVcdBEN3%2FFYiTDin%2B4GKvw%3D\" target=\"_blank\">设置文档</a>，设置完成后会告诉你网站访问地址（ps: 一定要把仓库设置为Public,不然无法进行设置）。</li></ol><p style=\"text-align: start;\"><img src=\"https://segmentfault.com/img/bVcX41W\" alt=\"image.png\" data-href=\"\" style=\"\"></p><ol style=\"text-align: start;\"><li>按照文档编辑.yml,增加发布流程</li></ol><pre style=\"text-align: start; line-height: 1.5;\"><code> # 上面的步骤拿过来\n # 新增 deploy\n  - name: deploy\n    uses: JamesIves/github-pages-deploy-action@v4.2.3\n    with:\n      branch: gh-pages # 部署的分支名 有一定要独立一个分支，第一次设置为master 好家伙构建完成后，直接把我的项目文件清除了，只剩下打包的文件了。\n      folder: build   # build后文件目录</code></pre><p style=\"text-align: start;\">效果<br><img src=\"https://segmentfault.com/img/bVcX42T\" alt=\"image.png\" data-href=\"\" style=\"\"><br>到这里基本的目标已经实现了，但是当我看公司内部的流程时，install, build, deploy流程是分开的，这样有利于增加一些校验，lint规则等流程，所以我在思考怎么拆分流程呢，第一次我简单的拆分</p><pre style=\"text-align: start; line-height: 1.5;\"><code>name: First GitHub Actions Demo\non: \n  push:\n    branches:\n      - master\n      - dev\n\njobs:\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      uses: actions/checkout@v2\n      uses: actions/setup-node@v2   \n      with:\n        node: 16.14\n    - name: yarn cache\n      id: yarn-cahce-dir-path\n      run: echo \"::set-output name=dir::$(yarn cache dir)\"\n    - uses: actions/cache@v2\n      id: yarn-cache\n      with: \n        path: ${{ steps.yarn-cahce-dir-path.outputs.dir }}\n        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n        restore-keys: | \n          ${{ runner.os }}-yarn-   \n    - run: yarn install\n    - run: yarn build\n  Deploy:\n    - name: depploy\n      uses: JamesIves/github-pages-deploy-action@v4.2.3\n      width:\n        branch: gh-pages\n        folder: build\n        clean: true\n        clean-exclude: |\n          special-file.txt\n          some/*.txt\n        ssh-key: ${{ secrets.PAGE_ACCESS_TOKEN }}    </code></pre><p style=\"text-align: start;\">我想着这样应该就可以了，一提交代码直接GG,第一是没有Deploy没有等待build完成，第二是两个job之间的文件不能够直接用，又翻了下文档才发现官方给了这两个 actions/upload-artifact@v2 actions/download-artifact@v2 可以在不同job之间公用文件，所以又改了改,build阶段上传打包好的文件，deploy阶段下载打包好的文件进行部署（注意deploy也要使用checkout@v2）。<br>最终结果</p><pre style=\"text-align: start; line-height: 1.5;\"><code>name: First GitHub Actions Demo\non: \n  push:\n    branches:\n      - master\n      - dev\n\njobs:\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n    # 步骤名称\n    - name: checkout code\n      uses: actions/checkout@v2\n    - name: actions/setup-node@v2\n      uses: actions/setup-node@v2   \n      with:\n        node-version: '16.14'\n        cache: 'yarn'\n        cache-dependency-path: '**/yarn.lock'\n    # 缓存 有需要可以开启 同时 setu node 也可以进行缓存\n    # - name: yarn cache\n    #   id: yarn-cahce-dir-path\n    #   run: echo \"::set-output name=dir::$(yarn cache dir)\"\n    # - uses: actions/cache@v2\n    #   id: yarn-cache\n    #   with: \n    #     path: ${{ steps.yarn-cahce-dir-path.outputs.dir }}\n    #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n    #     restore-keys: | \n    #       ${{ runner.os }}-yarn-    \n    - run: yarn install &amp;&amp; yarn build  \n    # 上传打包好的文件，所以下一步可以使用\n    - name: upload files \n      uses: actions/upload-artifact@v2\n      with: \n        name: build-pages\n        path: build\n        retention-days: 1\n  Deploy: \n    needs: Build # 确保build 阶段完成\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout code\n        uses: actions/checkout@v2\n      - name: download build files\n        uses: actions/download-artifact@v2\n        with:\n          name: build-pages\n          path: build\n      - name: deploy\n        uses: JamesIves/github-pages-deploy-action@v4.2.3\n        with:\n          branch: gh-pages\n          folder: build \n          token: \"${{ secrets.DEPLOY_TOKEN }}\"  </code></pre><p style=\"text-align: start;\">提交代码，查看运行结果，完成拆分。<br><img src=\"https://segmentfault.com/img/bVcX49V\" alt=\"image.png\" data-href=\"\" style=\"\"><br>到这里可以愉快的访问你的网站了。</p><h2 style=\"text-align: start;\">结尾</h2><p style=\"text-align: start;\">写作思路是按照当时完成的思路一步一步的去完成这个流程来的，所以有些功能可能还没想到，同时如果流程有什么可以优化的地方，欢迎各位大佬指教。当然，完整的流程还欠缺很多，目前只是先完成简单的打包构建流程，接下来还需要去学习gitlab 的CI、CD,完成后会在水一篇文章。在之后才会去看一些部署项目相关的内容。比如Docker,Nginx等，希望能在空闲之余学会整个流程。加油！</p><p><br></p>","art_author":"yellow star","art_createtime":"2022-11-23T08:37:21.000Z","art_tags":4}},"__N_SSG":true}