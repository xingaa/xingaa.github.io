{"pageProps":{"datas":{"id":96,"art_title":"GitHub Actions 入门教程","art_content":"<h1 style=\"text-align: left;\">阮一峰大神的入门教学，全文copy👨‍💻</h1><p> <a href=\"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\" target=\"_blank\">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a> </p><p><br></p><p style=\"text-align: left;\">作者： <a href=\"https://www.ruanyifeng.com/\" target=\"\" style=\"text-align: left;\">阮一峰</a></p><p style=\"text-align: left;\">日期： <a href=\"https://www.ruanyifeng.com/blog/2019/09/\" target=\"\" style=\"text-align: left;\">2019年9月12日</a></p><p style=\"text-align: left;\"><br></p><p style=\"text-align: left;\"><a href=\"https://github.com/features/actions\" target=\"_blank\" style=\"text-align: left;\">GitHub Actions</a> 是 GitHub 的<a href=\"https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" target=\"_blank\" style=\"text-align: left;\">持续集成服务</a>，于2018年10月<a href=\"https://github.blog/changelog/2018-10-16-github-actions-limited-beta/\" target=\"_blank\" style=\"text-align: left;\">推出</a>。</p><p style=\"text-align: left;\">这些天，我一直在试用，觉得它非常强大，有创意，比 <a href=\"https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" style=\"text-align: left;\">Travis CI</a> 玩法更多。</p><p style=\"text-align: left;\">本文是一个简单教程，演示如何使用 GitHub Actions 自动发布一个 React 应用到 <a href=\"https://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" style=\"text-align: left;\">GitHub Pages</a>。</p><p style=\"text-align: left;\"><img src=\"https://www.wangbase.com/blogimg/asset/201909/bg2019091201.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><h2 style=\"text-align: left;\">一、GitHub Actions 是什么？</h2><p style=\"text-align: left;\">大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p><p style=\"text-align: left;\">很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p><p style=\"text-align: left;\">如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p><p style=\"text-align: left;\">GitHub 做了一个<a href=\"https://github.com/marketplace?type=actions\" target=\"_blank\" style=\"text-align: left;\">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href=\"https://github.com/sdras/awesome-actions\" target=\"_blank\" style=\"text-align: left;\">awesome actions</a> 的仓库，也可以找到不少 action。</p><p style=\"text-align: left;\"><img src=\"https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><p style=\"text-align: left;\">上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>userName/repoName</code></span>的语法引用 action。比如，<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>actions/setup-node</code></span>就表示<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>github.com/actions/setup-node</code></span>这个<a href=\"https://github.com/actions/setup-node\" target=\"_blank\" style=\"text-align: left;\">仓库</a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href=\"https://github.com/actions\" target=\"_blank\" style=\"text-align: left;\">github.com/actions</a> 里面。</p><p style=\"text-align: left;\">既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href=\"https://help.github.com/en/articles/about-actions#versioning-your-action\" target=\"_blank\" style=\"text-align: left;\">官方文档</a>。</p><blockquote style=\"text-align: left;\">actions/setup-node@74bc508 # 指向一个 commit actions/setup-node@v1.0 # 指向一个标签 actions/setup-node@master # 指向一个分支</blockquote><h2 style=\"text-align: left;\">二、基本概念</h2><p style=\"text-align: left;\">GitHub Actions 有一些自己的术语。</p><p style=\"text-align: left;\">（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p style=\"text-align: left;\">（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p style=\"text-align: left;\">（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p style=\"text-align: left;\">（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h2 style=\"text-align: left;\">三、workflow 文件</h2><p style=\"text-align: left;\">GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>.github/workflows</code></span>目录。</p><p style=\"text-align: left;\">workflow 文件采用 <a href=\"https://www.ruanyifeng.com/blog/2016/07/yaml.html\" target=\"_blank\" style=\"text-align: left;\">YAML 格式</a>，文件名可以任意取，但是后缀名统一为<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>.yml</code></span>，比如<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>foo.yml</code></span>。一个库可以有多个 workflow 文件。GitHub 只要发现<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>.github/workflows</code></span>目录里面有<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>.yml</code></span>文件，就会自动运行该文件。</p><p style=\"text-align: left;\">workflow 文件的配置字段非常多，详见<a href=\"https://help.github.com/en/articles/workflow-syntax-for-github-actions\" target=\"_blank\" style=\"text-align: left;\">官方文档</a>。下面是一些基本字段。</p><p style=\"text-align: left;\"><code><strong>（1）name</strong></code></p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>name</code></span>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><blockquote style=\"text-align: left;\">name: GitHub Actions Demo</blockquote><p style=\"text-align: left;\"><code><strong>（2）on</strong></code></p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>on</code></span>字段指定触发 workflow 的条件，通常是某些事件。</p><blockquote style=\"text-align: left;\">on: push</blockquote><p style=\"text-align: left;\">上面代码指定，<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>push</code></span>事件触发 workflow。</p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>on</code></span>字段也可以是事件的数组。</p><blockquote style=\"text-align: left;\">on: [push, pull_request]</blockquote><p style=\"text-align: left;\">上面代码指定，<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>push</code></span>事件或<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>pull_request</code></span>事件都可以触发 workflow。</p><p style=\"text-align: left;\">完整的事件列表，请查看<a href=\"https://help.github.com/en/articles/events-that-trigger-workflows\" target=\"_blank\" style=\"text-align: left;\">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p><p style=\"text-align: left;\"><code><strong>（3）on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</strong></code></p><p style=\"text-align: left;\">指定触发事件时，可以限定分支或标签。</p><blockquote style=\"text-align: left;\">on: push: branches: - master</blockquote><p style=\"text-align: left;\">上面代码指定，只有<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>master</code></span>分支发生<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>push</code></span>事件时，才会触发 workflow。</p><p style=\"text-align: left;\"><code><strong>（4）jobs.&lt;job_id&gt;.name</strong></code></p><p style=\"text-align: left;\">workflow 文件的主体是<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>jobs</code></span>字段，表示要执行的一项或多项任务。</p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>jobs</code></span>字段里面，需要写出每一项任务的<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job_id</code></span>，具体名称自定义。<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job_id</code></span>里面的<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>name</code></span>字段是任务的说明。</p><blockquote style=\"text-align: left;\">jobs: my_first_job: name: My first job my_second_job: name: My second job</blockquote><p style=\"text-align: left;\">上面代码的<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>jobs</code></span>字段包含两项任务，<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job_id</code></span>分别是<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>my_first_job</code></span>和<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>my_second_job</code></span>。</p><p style=\"text-align: left;\"><code><strong>（5）jobs.&lt;job_id&gt;.needs</strong></code></p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>needs</code></span>字段指定当前任务的依赖关系，即运行顺序。</p><blockquote style=\"text-align: left;\">jobs: job1: job2: needs: job1 job3: needs: [job1, job2]</blockquote><p style=\"text-align: left;\">上面代码中，<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job1</code></span>必须先于<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job2</code></span>完成，而<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job3</code></span>等待<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job1</code></span>和<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job2</code></span>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job1</code></span>、<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job2</code></span>、<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>job3</code></span>。</p><p style=\"text-align: left;\"><code><strong>（6）jobs.&lt;job_id&gt;.runs-on</strong></code></p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>runs-on</code></span>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><blockquote style=\"text-align: left;\">ubuntu-latest，ubuntu-18.04或ubuntu-16.04windows-latest，windows-2019或windows-2016macOS-latest或macOS-10.14</blockquote><p style=\"text-align: left;\">下面代码指定虚拟机环境为<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>ubuntu-18.04</code></span>。</p><blockquote style=\"text-align: left;\">runs-on: ubuntu-18.04</blockquote><p style=\"text-align: left;\"><code><strong>（7）jobs.&lt;job_id&gt;.steps</strong></code></p><p style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>steps</code></span>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><blockquote style=\"text-align: left;\">jobs.&lt;job_id&gt;.steps.name：步骤名称。jobs.&lt;job_id&gt;.steps.run：该步骤运行的命令或者 action。jobs.&lt;job_id&gt;.steps.env：该步骤所需的环境变量。</blockquote><p style=\"text-align: left;\">下面是一个完整的 workflow 文件的范例。</p><blockquote style=\"text-align: left;\">name: Greeting from Mona on: push jobs: my-job: name: My Job runs-on: ubuntu-latest steps: - name: Print a greeting env: MY_VAR: Hi there! My name is FIRST_NAME: Mona MIDDLE_NAME: The LAST_NAME: Octocat run: | echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</blockquote><p style=\"text-align: left;\">上面代码中，<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>steps</code></span>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h2 style=\"text-align: left;\">四、实例：React 项目发布到 GitHub Pages</h2><p style=\"text-align: left;\">下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在<a href=\"https://github.com/ruanyf/github-actions-demo\" target=\"_blank\" style=\"text-align: left;\">这个仓库</a>里面，发布后的参考网址为<a href=\"https://ruanyf.github.io/github-actions-demo\" target=\"_blank\" style=\"text-align: left;\">ruanyf.github.io/github-actions-demo</a>。</p><p style=\"text-align: left;\">第一步，GitHub Actions 目前还处在测试阶段，需要到<a href=\"https://github.com/features/actions/signup/\" target=\"_blank\" style=\"text-align: left;\">这个网址</a>申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。</p><p style=\"text-align: left;\">获得资格后，仓库顶部的菜单会出现<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>Actions</code></span>一项。</p><p style=\"text-align: left;\"><img src=\"https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><p style=\"text-align: left;\">第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照<a href=\"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\" target=\"_blank\" style=\"text-align: left;\">官方文档</a>，生成一个密钥。然后，将这个密钥储存到当前仓库的<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>Settings/Secrets</code></span>里面。</p><p style=\"text-align: left;\"><img src=\"https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><p style=\"text-align: left;\">上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>ACCESS_TOKEN</code></span>。如果你不用这个名字，后面脚本里的变量名也要跟着改。</p><p style=\"text-align: left;\">第三步，本地计算机使用<a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" style=\"text-align: left;\"><span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>create-react-app</code></span></a>，生成一个标准的 React 应用。</p><blockquote style=\"text-align: left;\">$ npx create-react-app github-actions-demo $ cd github-actions-demo</blockquote><p style=\"text-align: left;\">然后，打开<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>package.json</code></span>文件，加一个<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>homepage</code></span>字段，表示该应用发布后的根目录（参见<a href=\"https://create-react-app.dev/docs/deployment#building-for-relative-paths\" target=\"_blank\" style=\"text-align: left;\">官方文档</a>）。</p><blockquote style=\"text-align: left;\">\"homepage\": \"https://[username].github.io/github-actions-demo\",</blockquote><p style=\"text-align: left;\">上面代码中，将<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>[username]</code></span>替换成你的 GitHub 用户名，参见<a href=\"https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10\" target=\"_blank\" style=\"text-align: left;\">范例</a>。</p><p style=\"text-align: left;\">第四步，在这个仓库的<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>.github/workflows</code></span>目录，生成一个 workflow 文件，名字可以随便取，这个示例是<span style=\"color: rgb(17, 17, 17); background-color: pink;\"><code>ci.yml</code></span>。</p><p style=\"text-align: left;\">我们选用一个别人已经写好的 action：<a href=\"https://github.com/marketplace/actions/deploy-to-github-pages\" target=\"_blank\" style=\"text-align: left;\">JamesIves/github-pages-deploy-action</a>，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看<a href=\"https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml\" target=\"_blank\" style=\"text-align: left;\">源码</a>）。</p><blockquote style=\"text-align: left;\">name: GitHub Actions Build and Deploy Demo on: push: branches: - master jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@master - name: Build and Deploy uses: JamesIves/github-pages-deploy-action@master env: ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }} BRANCH: gh-pages FOLDER: build BUILD_SCRIPT: npm install &amp;&amp; npm run build</blockquote><p style=\"text-align: left;\">上面这个 workflow 文件的要点如下。</p><blockquote style=\"text-align: left;\">整个流程在master分支发生push事件时触发。只有一个job，运行在虚拟机环境ubuntu-latest。第一步是获取源码，使用的 action 是actions/checkout。第二步是构建和部署，使用的 action 是JamesIves/github-pages-deploy-action。第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。</blockquote><p style=\"text-align: left;\">第五步，保存上面的文件后，将整个仓库推送到 GitHub。</p><p style=\"text-align: left;\">GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看<a href=\"https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks\" target=\"_blank\" style=\"text-align: left;\">运行日志</a>，日志默认保存30天。</p><p style=\"text-align: left;\"><img src=\"https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><p style=\"text-align: left;\">等到 workflow 运行结束，访问 <a href=\"https://ruanyf.github.io/github-actions-demo/\" target=\"_blank\" style=\"text-align: left;\">GitHub Page</a>，会看到构建成果已经发上网了。</p><p style=\"text-align: left;\"><img src=\"https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><p style=\"text-align: left;\">以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。</p><h2 style=\"text-align: left;\">五、参考链接</h2><ul style=\"text-align: left;\"><li style=\"text-align: left;\"><a href=\"https://help.github.com/en/categories/automating-your-workflow-with-github-actions\" target=\"_blank\" style=\"text-align: left;\">GitHub Pages 官方文档</a></li><li style=\"text-align: left;\"><a href=\"https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/\" target=\"_blank\" style=\"text-align: left;\">Github Actions for web apps</a>, Luke Boyle</li><li style=\"text-align: left;\"><a href=\"https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851\" target=\"_blank\" style=\"text-align: left;\">My First Week With GitHub Actions</a>, Adam Zolyak</li></ul><p style=\"text-align: left;\">（完）</p><p style=\"text-align: left;\"><br></p>","art_author":"yellow star","art_createtime":"2022-11-22T03:41:39.000Z","art_tags":4}},"__N_SSG":true}