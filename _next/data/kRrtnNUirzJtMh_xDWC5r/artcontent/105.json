{"pageProps":{"datas":{"id":105,"art_title":"TS 中 interface 和 type 究竟有什么区别？","art_content":"<p><br></p><h2>前言</h2><p>我在学习 TS 时遇到了一个问题：</p><p>比如下面这个例子，可以用 type，也可以用 interface。</p><pre><code class=\"language-typescript\">interface Person {\n    name: string\n    age: number\n}\n\nconst person: Person = {\n    name: 'lin',\n    age: 18\n}</code></pre><pre><code class=\"language-typescript\">type Person = {\n    name: string\n    age: number\n}\n\nconst person: Person = {\n    name: 'lin',\n    age: 18\n}</code></pre><p><br></p><h2>interface</h2><p>interface（接口） 是 TS 设计出来用于定义对象类型的，可以对对象的形状进行描述。</p><pre><code class=\"language-typescript\">interface Person {\n    name: string\n    age: number\n}\n\nconst person: Person = {\n    name: 'lin',\n    age: 18\n}</code></pre><h2>type</h2><p>type (类型别名)，顾名思义，类型别名只是给类型起一个新名字。<strong>它并不是一个类型，只是一个别名而已</strong></p><p>就像 NBA 球员 扬尼斯-阿德托昆博，名字太长难记，我们叫他<code>字母哥</code>。</p><p>就像我们项目中配置 <code>alias</code>，不用写相对路径就能很方便地引入文件</p><pre><code class=\"language-typescript\">import componentA from '../../../../components/componentA/index.vue'\n变成\nimport componentA from '@/components/componentA/index.vue\n复制代码</code></pre><p>有了 type，我们书写 TS 的时候可以更加方便简洁。</p><p>比如下面这个例子，<code>getName</code> 这个函数接收的参数可能是字符串，可能是函数，就可以这么写。</p><pre><code class=\"language-typescript\">type Name = string\ntype NameResolver = () =&gt; string\ntype NameOrResolver = Name | NameResolver          // 联合类型\nfunction getName(n: NameOrResolver): Name {\n    if (typeof n === 'string') {\n        return n\n    }\n    else {\n        return n()\n    }\n}</code></pre><p>这样调用时传字符串和函数都可以。</p><pre><code class=\"language-typescript\">getName('lin')\ngetName(() =&gt; 'lin')</code></pre><p>如果传的格式有问题，就会提示。</p><p><br></p><h2>两者相同点</h2><h3>都可以定义一个对象或函数</h3><p>定义对象前面已经说了，我们来看一下如何定义函数。</p><pre><code class=\"language-typescript\">type addType = (num1:number,num2:number) =&gt; number\n\ninterface addType {\n    (num1:number,num2:number):number\n}\n这两种写法都可以定义函数类型</code></pre><pre><code class=\"language-typescript\">const add:addType = (num1, num2) =&gt; {\n    return num1 + num2\n}</code></pre><h3>都允许继承（extends）</h3><p>我们定义一个 Person 类型和 Student 类型，<strong>Student 继承自 Person</strong>，可以有下面四种方式</p><h4>interface 继承 interface</h4><pre><code class=\"language-typescript\">interface Person { \n  name: string \n}\ninterface Student extends Person { \n  grade: number \n}</code></pre><pre><code class=\"language-typescript\">const person:Student = {\n  name: 'lin',\n  grade: 100\n}</code></pre><h4>type 继承 type</h4><pre><code class=\"language-typescript\">type Person = { \n  name: string \n}\ntype Student = Person & { grade: number  }    用交叉类型</code></pre><h4>interface 继承 type</h4><pre><code class=\"language-typescript\">type Person = { \n  name: string \n}\n\ninterface Student extends Person { \n  grade: number \n}</code></pre><h4>type 继承 interface</h4><pre><code class=\"language-typescript\">interface Person { \n  name: string \n}\n\ntype Student = Person & { grade: number  }    用交叉类型</code></pre><p>interface 使用 extends 实现继承， type 使用交叉类型实现继承</p><h2>两者不同点</h2><h3>type 可以，interface 不行</h3><blockquote>类型别名会给一个类型起个新名字。 类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。 -- TS 文档</blockquote><h4>声明基本类型、联合类型、交叉类型、元组</h4><pre><code class=\"language-typescript\">type Name = string                              // 基本类型\n\ntype arrItem = number | string                  // 联合类型\n\nconst arr: arrItem[] = [1,'2', 3]\n\ntype Person = { \n  name: Name \n}\n\ntype Student = Person & { grade: number  }       // 交叉类型\n\ntype Teacher = Person & { major: string  } \n\ntype StudentAndTeacherList = [Student, Teacher]  // 元组类型\n\nconst list:StudentAndTeacherList = [\n  { name: 'lin', grade: 100 }, \n  { name: 'liu', major: 'Chinese' }\n]</code></pre><h3>interface可以，type 不行</h3><h4>合并重复声明</h4><pre><code class=\"language-typescript\">interface Person {\n    name: string\n}\n\ninterface Person {         // 重复声明 interface，就合并了\n    age: number\n}\n\nconst person: Person = {\n    name: 'lin',\n    age: 18\n}</code></pre><p>重复声明 type ，就报错了</p><pre><code class=\"language-typescript\">type Person = {\n    name: string\n}\n\ntype Person = {     // Duplicate identifier 'Person'\n    age: number\n}\n\nconst person: Person = {\n    name: 'lin',\n    age: 18\n}\n</code></pre><p><br></p><h2>小结</h2><p>interface 和 type 被 TS 设计出来，是完全不同的东西，有各自的职责。</p><p>interface 是<strong>接口</strong>，用于描述一个对象。</p><p>type 是<strong>类型别名</strong>，用于给各种类型定义别名，让 TS 写起来更简洁、清晰。</p><p>只是有时候两者都能实现同样的功能，才会经常被混淆。</p><p>平时开发中，一般<strong>使用组合或者交叉类型</strong>的时候，用 type。</p><p>一般要用类的 <strong>extends</strong> 或 <strong>implements</strong> 时，用 interface。</p><p><br></p><p>原文： <a href=\"https://juejin.cn/post/7063521133340917773\" target=\"_blank\">https://juejin.cn/post/7063521133340917773</a> <br></p>","art_author":"yellow star","art_createtime":"2022-12-05T01:31:14.000Z","art_tags":4}},"__N_SSG":true}